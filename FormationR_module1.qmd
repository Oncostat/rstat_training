---
format: 
  revealjs: 
    theme: simple
    css: assets/style.css
    template-partials:
     assets/title-slide.html
    
    title: "ONCOSTAT Team <br> Training course R"

subtitle: "Module 1 : Introduction of programming language R and the RStudio interface"
description: "Getting started with RStudio"
author: "Nusaïbah IBRAHIMI"
incremental: true
controls: true
keyboard: true
date: today
date-format: full
affiliation-title: "BBE"

editor: visual
self-contained: true
toc-depth: 3
toc-title: "Table of contents"
toc: true
slide-number: true
smaller: true
preview-links: auto
    footer: "The source code for this presentation is available [on GitHub](https://github.com/Oncostat/rstat_training/){target='_blank'}."
execute:
  echo: true
  cache: true
  code-overflow: wrap
  warnings: false
  messages: false
keywords: ["r", "rstat", "training", "course", "module"]
mouse-wheel: true
knitr:
  opts_chunk: 
    collapse: true
    comment: "#>" 
    R.options:
      crosstable_compact: true
      width: 105
---

# Table of contents

-   Interface RStudio

-   Operators

-   Package installation

-   Variables

-   Usual functions

-   Discussion R/SAS

# Interface RStudio

## First look at RStudio

When we open RStudio, R is launched as well. For the first time, we will probably see a layout like this.

![](images/interface-03.PNG)

There are at least 3 panes. But usually, we create a script R and save it in our folders.

![](images/clipboard-4117190390.png)

::: notes
Links:

<https://www.dataquest.io/blog/tutorial-getting-started-with-r-and-rstudio/#tve-jump-173bb2584fe>

RStudio is an open-source tool for programming in R. RStudio is a flexible tool that helps you create readable analyses, and keeps your code, images, comments, and plots together in one place.

Using RStudio for data analysis and programming in R provides many advantages. Here are a few examples of what RStudio provides:

-   An intuitive interface that lets us keep track of saved objects, scripts, and figures

-   A text editor with features like color-coded syntax that helps us write clean scripts

-   Auto complete features save time

-   Tools for creating documents containing a project’s code, notes, and visuals

-   Dedicated Project folders to keep everything in one place
:::

## <!--In the toolbar-->

## The console

The *Console* is a tab in RStudio where we can run R code. The *Console* is a tab in RStudio where we can run R code. We use the *Console* to test code immediately. When we type an expression like 1+2, we will see the result below after pressing the enter key.

Message warnings, /!\\ in case of error the code is blocked, unlike SAS /!\\

![](images/clipboard-3467131464.png)

::: notes
Let’s start off by introducing some features of the **Console**.

Notice that the window pane where the console is located contains three tabs: `Console`, `Terminal` and `Jobs` (this may vary depending on the version of RStudio in use). We’ll focus on the Console for now.

Scroll down, and try typing a few expressions like this one. Press the enter key to see the result.
:::

We can store the output of this command as a variable. To do so, we have to name our variable result.

``` r
result <- 1+2
```

The `<-` is called the assignment operator. This operator assigns values to variables. The operator `=` is similar. The main operators will be presented in a dedicated section.

When we type `result` into the *Console* and press the enter key, we see the stored value of `3`:

![](images/clipboard-2511795446.png)

When we create a variable in RStudio, it saves it as an object in the R **global environment**. We will discuss the environment and how to view objects stored in the environment in the next section.

However, the code in the *Console* is unsaved after closing RStudio, which differs from the script R.

## The environment

During a programming session in R, any variables we define, or data we import and save in a dataframe, are stored in our global environment. In RStudio, we can see the objects in our global environment in the *Environment* tab at the top right of the interface.

We will see any objects we created; such as result, under values in the *Environment* tab.

Saving created objects during this session

You can click to have a view if those objects.

![](images/clipboard-3526065785.png)

::: notes
We can think of the **global environment** as our workspace.

Notice that the value, `3`, stored in the variable is displayed.

Sometimes, having too many named objects in the global environment creates confusion. Maybe we’d like to remove all or some of the objects.
:::

To remove all objects, click the broom icon at the top of the window.

To remove selected objects from the workspace, select the Grid view from the dropdown menu. Here we can check the boxes of the objects we would like to remove and use the broom icon to clear them from our `Global Environment`.

![](images/clipboard-4117536477.png)

![](images/Environnement.PNG)

## 

## R script

The R script is a file where we write the code and run it on RStudio. The outputs are displayed in the *Console* and the figures in the *Plots tab*. To clarify the script for an outsider, we add comments to explain the aim of the code, example below.

``` r
# script R 
toto = c(1,2,3,4,5) 
toto1 = 1:5 
toto2 = seq(1,5,1)    # function seq() create a sequence of number 
```

![](images/clipboard-1858809340.png)

Output (Viewer and/or console)

``` r
# output
toto == toto1  # == is an logical operator to verify the equality
## [1] TRUE TRUE TRUE TRUE TRUE
toto2[6] ## [1] NA  
toto1[3:5] ## 3 4 5

plot(x = toto, y = 2* toto1)
```

Shortcuts :

ctrl S : save

crtl enter = to run the line of code,

ctrl i =to indent to code.

## Plots, Viewer

The figures and tables are displayed in the Plots tab or Viewer tab.

From the tab, you can zoom in or save it as PDF or as Image.

![](images/Plot.PNG)

## Packages

Packages are shareable collections of code, data, and documentation.

One of the most popular collection of packages in R is known as the “tidyverse”. The tidyverse is a [collection of R packages](https://www.tidyverse.org/packages/) designed for working with data. The tidyverse packages share a common design philosophy, grammar, and data structures. Tidyverse packages “play well together”. The tidyverse enables you to spend less time cleaning data so that you can focus more on analyzing, visualizing, and modeling data.

The most common “core” tidyverse packages are:

-   `readr`, for data import.

-   `ggplot2`, for data visualization.

-   `dplyr`, for data manipulation.

-   `tidyr`, for data tidying.

-   `purrr`, for functional programming.

-   `tibble`, for tibbles, a modern re-imagining of dataframes.

-   `stringr`, for string manipulation.

-   `forcats`, for working with factors (categorical data).

There are many ways to install packages in R, we use the built-in `install.packages()` function in the script R or on the *Console*.

```         
install.packages("tidyverse")
```

The `install.packages()` command only needs to be used to download and install packages for the first time. Then, it is stocked in your RStudio. We can find it in the Packages tab.

In the window at the bottom right of the *Console*, the *Packages* tab contains all installed packages in R.

![](images/clipboard-1302393951.png)

Another way to install a package is to click on the box install and look for the name of the package on the Repository (CRAN). The CRAN [Comprehensive R Archive Network](https://cran.r-project.org/) is a site where you can find nearly everything that enables to code in R. In the case where the packages is not available on the CRAN, you can download the .zip in the website then install it by clicking on the box install and choose the option Package Archive File (zip, tar.gz).

To load them, you have either click on the box or run the code library("name_XXX").

We can search for packages, and checking the box next to a package loads it (the code appears in the console). Otherwise, to load a package you run the code library("name_XXX").

``` r
install.packages("stringr")
library("stringr")
```

## Help

### Help on a Package

::: notes
We’ve learned how to install and load packages. But what if we’d like to learn more about a package that we’ve installed? That’s easy! Clicking the package name in the `Packages` tab takes us to the `Help` tab for the selected package. Here’s what we see if we click the `tidyr` package
:::

To have the documentation of the package, you click on the package name, in the *Packages* tab. It takes us to the *Help* tab.

![](images/clipboard-2119875930.png)

![](images/clipboard-3183408281.png)

Alternatively, we can type this command into the console and achieve the same result:

\`\`\`r

```         
help(package = "stringr")
```

\`\`\`

The help page for a package provides quick access to documentation for each function included in a package. From the main help page for a package you can also access “vignettes” when they are available. Vignettes provide brief introductions, tutorials, or other reference information about a package, or how to use specific functions in a package.

```         
vignette(package = "stringr")
```

Which results in this list of available options:

From there, we can select a particular vignette to view:

Now we see the Pivot vignette is displayed in the `Help` tab. This is one example of why RStudio is a powerful tool for programming in R. We can access function and package documentation and tutorials without leaving RStudio!

### Help on a function

To have the help of a function, you can use the Help tab or run the code ?function_name_XXX, you will find usually the description of the function that means the aim, the arguments, details of output and examples.

![](images/clipboard-440183010.png)

As we learned in the last section, we can get help on a function by clicking the package name in `Packages` and then click on a function name to see the help file. Here we see the str_to_lower`()` function from the `stringr` package is at the top of this list:

We can achieve the same results in the `Console` with any of these function calls:

```         
help("str_to_lower") 
help(str_to_lower) 
?str_to_lower
```

Note that the specific `Help` tab for the str_to_lower`()` function (or any function we’re interested in) may not be the default result if the package that contains the function is not loaded into memory yet. In general it’s best to ensure a specific package is loaded before seeking help on a function.

Shortcut

? : help

F1 on the function : help documentation

Sometimes, two packages may have a function with the same call, but different argument. To avoid the conflict, you precise the package name followed by :: and the name of the function.

# Operators

![](images/clipboard-1075189407.png)

%% modulo

\*\* : power

\*: multiplication

/ division

+addition

-difference

# Variable

## Creation of variable

Variables are containers for storing data values.

R does not have a command for declaring a variable. A variable is created the moment you first assign a value to it. To assign a value to a variable, use the `<- or =` sign.

To output (or print) the variable value, just type the variable name.

## Type of variable

In programming, data type is an important concept.

Variables can store data of different types, and different types can do different things.

In R, variables do not need to be declared with any particular type, and can even change type after they have been set. R has a variety of data types and object classes.

Basic Data Types:

| type                                              | example                    |
|---------------------------------------------------|----------------------------|
| numeric ( real with a point not a dot)            | 1, 10.5, 56                |
| character (a string)                              | "home", "Where is Bryan?"  |
| logical (a boolean)                               | TRUE or FALSE              |
| factor (labeled variable) used to categorize data |                            |
|                                                   |                            |
|                                                   |                            |

We use typeof() function to ckeck the data type of a variable

To only print the levels, use the `levels()` function.

## Class of variable

We can use the `class()` function to check the data type of a variable:

+--------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| class              | definition                                                                                                                                                                                                | example                                                                                                                                                                          |
+====================+===========================================================================================================================================================================================================+==================================================================================================================================================================================+
| vector             | object of 1 dimension stocking elements of same type                                                                                                                                                      | vec = c(1,2,3) (equivalent to 1:3 or seq(1,3,1)                                                                                                                                  |
|                    |                                                                                                                                                                                                           |                                                                                                                                                                                  |
|                    |                                                                                                                                                                                                           | is.vector()                                                                                                                                                                      |
|                    |                                                                                                                                                                                                           |                                                                                                                                                                                  |
|                    |                                                                                                                                                                                                           | as.vector()                                                                                                                                                                      |
+--------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| matrix             | object of 2 dimension stocking                                                                                                                                                                            | mat = matrix(c(1, 2, 3, 11, 12, 13), nrow = 2, ncol = 3, byrow = TRUE, dimnames = list(c("row1", "row2"), c("C.1", "C.2", "C.3")))                                               |
|                    |                                                                                                                                                                                                           |                                                                                                                                                                                  |
|                    |                                                                                                                                                                                                           | is.matrix()                                                                                                                                                                      |
|                    |                                                                                                                                                                                                           |                                                                                                                                                                                  |
|                    |                                                                                                                                                                                                           | as.matrix()                                                                                                                                                                      |
+--------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| data frame         | object of 2 dimensions tightly coupled collections of variables which share many of the properties of matrices and of lists, used as the fundamental data structure by most of **R**'s modeling software. | df = data.frame("name" = c("Mr Bean","Miss Popping"),                                                                                                                            |
|                    |                                                                                                                                                                                                           |                                                                                                                                                                                  |
|                    |                                                                                                                                                                                                           | "gender" = c(1,0) )                                                                                                                                                              |
|                    |                                                                                                                                                                                                           |                                                                                                                                                                                  |
|                    |                                                                                                                                                                                                           | as.data.frame()                                                                                                                                                                  |
+--------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| list               | list of objects presented above                                                                                                                                                                           | listing = list("object1"=vec,                                                                                                                                                    |
|                    |                                                                                                                                                                                                           |                                                                                                                                                                                  |
|                    |                                                                                                                                                                                                           | "object2"=df)                                                                                                                                                                    |
|                    |                                                                                                                                                                                                           |                                                                                                                                                                                  |
|                    |                                                                                                                                                                                                           | is.list()                                                                                                                                                                        |
|                    |                                                                                                                                                                                                           |                                                                                                                                                                                  |
|                    |                                                                                                                                                                                                           | as.list()                                                                                                                                                                        |
+--------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

To call or assign a value to an element of a vector you have to use the hooks \[ \] or \$. See the following examples :

```{vec = c("A","B","C")}
vec[1] # "A"


mat = matrix(c(1, 2, 3, 11, 12, 13), nrow = 2, ncol = 3, byrow = TRUE,                dimnames = list(c("row1", "row2"),                                c("C.1", "C.2", "C.3")))

mat[2,3]

df = data.frame("name" = c("Mr Bean","Miss Popping"),
                "gender" = c(1,0) )
df$gender = factor(x = df$gender, levels = c(0,1), labels = c("Woman", "Man"))

df$name # "Mr Bean","Miss Popping"
df[1,"name"] # "Mr Bean"
df[2,"gender"] # "Woman"

listing = list("object1" = vec, "object2" = df)

listing[[2]]
listing$object2
```

# Function

## Usual function

Here are the usual functions used in R

paste() to combine two strings

min() , max()

mean() compute the mean of a numeric vector

print() displays an item

table() displays a contingency table,

as.numeric() convert an element to numeric,

as.character() convert an element to character,

summary()

head() display the first rows(by default the 10 first ones) of a table ,

## Creation of a new function

The syntax of a function in R

![](images/clipboard-3123930456.png)

### Syntax instruments

#### if else

if (condition1) {

}else if (condition2){

}else{}

#### loop while

Loops can execute a block of code as long as a specified condition is reached.

Loops are handy because they save time, reduce errors, and they make code more readable.

R has two loop commands:

-   `while` loops

-   `for` loops

With the `while` loop we can execute a set of statements as long as a condition is TRUE:

```{r}
i <- 1
while (i < 6) {
  print(i)
  i <- i + 1
}
```

**Note:** remember to increment i, or else the loop will continue forever.

## Break

With the `break` statement, we can stop the loop even if the while condition is TRUE:

## Next

With the `next` statement, we can skip an iteration without terminating the loop:

#### loop for

A `for` loop is used for iterating over a sequence:

This is less like the `for` keyword in other programming languages, and works more like an iterator method as found in other object-oriented programming languages.

With the `for` loop we can execute a set of statements, once for each item in a vector, array, list, etc..

An example of creating a function

To create a function, use the `function()` keyword:

To call a function, use the function name followed by parenthesis, like **my_function()**:

Information can be passed into functions as arguments.

Arguments are specified after the function name, inside the parentheses. You can add as many arguments as you want, just separate them with a comma.

To let a function return a result, use the `return()` function:
