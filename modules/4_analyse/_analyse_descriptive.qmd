---
format:
  revealjs:
    theme: simple
    css: assets/style.css
    pagetitle: "Oncostat R - analyses"
    template-partials:
     - assets/title-slide.html
    title: "√âquipe ONCOSTAT <br> Modules de cours de R"
    subtitle: "Analyse descriptive & Analyse statistique"
    author: "Dan Chaltiel"
    description: "üéØ D√©crire et analyser vos donn√©es efficacement !"
    incremental: true
    controls: true
    keyboard: true
    code-line-numbers: true
    # embed-resources: true
    scrollable: true
    # toc: true
    slide-number: true
    smaller: true
    preview-links: auto
    footer: "Le code source de cette pr√©sentation est disponible [sur GitHub](https://github.com/Oncostat/rstat_training/){target='_blank'}."
execute:
  echo: true
  cache: true
  code-overflow: wrap
  warnings: false
  messages: false
keywords: ["r", "rstat", "training", "course", "module"]
mouse-wheel: true
knitr:
  opts_chunk: 
    collapse: true
    comment: "#>" 
    R.options:
      crosstable_compact: true
      width: 105
editor: 
  markdown: 
    wrap: 72
---

## Le package `crosstable`


:::::  {.columns}

::: {.column style="width:70%; border-right:none;"}
-   Package permettant de g√©n√©rer des tableaux descriptifs
-   G√®re quasiment tous les types de variables <br> (continues, discr√®tes,
    ...)
-   Tr√®s flexible: adaptabilit√© des calculs descriptifs
-   Permet de calculer automatiquement des tailles d'effet, voire des
    test statistiques
-   S'int√®gre avec d'autre outils comme `officer` ou `quarto`
:::

::: {.column width="30%"}
![](media/logo_crosstable.png)
:::

::::: 



## Fonctions

::: largeULMargin
-   Fonction
    [`crosstable()`](https://danchaltiel.github.io/crosstable/reference/crosstable.html)
    pour g√©n√©rer le contenu du tableau descriptif

    -   Cr√©e un objet R de type `data.frame`, modifiable si besoin
        (dplyr)

-   Fonction
    [`as_flextable()`](https://danchaltiel.github.io/crosstable/reference/as_flextable.html)
    pour le formatter graphiquement

    -   Cr√©e un objet de type `flextable`, qui repr√©sente un tableau
        HTML
:::

-   Documentation d√©taill√©e sur
    [https://danchaltiel.github.io/crosstable/](https://danchaltiel.github.io/crosstable/#overview)

::: {.callout-note title="Astuce"}
Il y a 2 autres formats d‚Äôoutput, [`as_gt()`](https://danchaltiel.github.io/crosstable/reference/as_gt.html)
et 
[`as_workbook()`](https://danchaltiel.github.io/crosstable/reference/as_workbook.html), mais on n'en parlera pas ici.
:::

## Dataset `mtcars2`

Dataset d'exemple utilis√© dans le package (qui d√©crit 32 voitures de collection)

```{r}
library(tidyverse)
library(crosstable)
head(mtcars2, 4)
```
<br>

::: {.fragment}
```{r}
get_label(mtcars2)
```
:::

## Exemple simple

```{r}
crosstable(mtcars2, cols=c(mpg, vs), 
           by=cyl) %>% 
  as_flextable(keep_id=TRUE)
```

## Exemple compliqu√©

```{r}
crosstable(mtcars2, cols=c(starts_with("cy"), ends_with("at")), 
           by=c(am, vs), 
           num_digits=3, 
           funs=c(mean, quantile), 
           funs_arg=list(probs=c(.25,.75)),
           effect=TRUE) %>% 
  as_flextable(keep_id=TRUE, compact=TRUE, header_show_n=2)

```


:::{.fragment fragment-index=3 real-fragment-index=3}
![](media/boom-mind-blown.gif){.absolute bottom=0 right=0}
![](media/boom-mind-blown.gif){.absolute bottom=0 left=0}
:::

## Arguments principaux

La documentation de
[`crosstable()`](https://danchaltiel.github.io/crosstable/reference/crosstable.html)
est disponible sur RStudio et [en
ligne](https://danchaltiel.github.io/crosstable/reference/crosstable.html).

Il y a un grand nombre de param√®tres, les principaux sont les suivants:

-   `data` : Dataset source, vient souvent du pipe.

-   `cols` : Variables √† analyser. Peut utiliser la syntaxe tidyselect
    ü§©.

-   `by` : Variables de regroupement.

-   `total` : Affiche les totaux des colonnes (`"row"`), des lignes
    (`"column"`), ou des deux (`"both"`). Oui, c'est contre-intuitif
    ¬Ø\\*(„ÉÑ)*/¬Ø

-   `percent_pattern` et `percent_digits` : Contr√¥le les pourcentages.

-   `funs` et `funs_arg` : Contr√¥le les calculs sur les variables
    num√©riques.

## Arguments accessoires

Arguments moins importants mais souvent utiles

-   `showNA` : Affiche ou non les valeurs manquantes.

-   `drop_levels` : Supprime les levels non observ√©s.

-   `remove_zero_percent` : Supprime les proportions quand N=0.

-   `unique_numeric` : Nombre minimum de valeurs uniques pour consid√©rer
    une variable num√©rique. Par d√©faut: `3`.

-   `test`& `effect` : Calcule des tests statistiques ou des
    effect-sizes. A utiliser avec parcimonie.

## Tidyselect

Syntaxe permettant de s√©lectionner des colonnes intelligemment, utilis√©e
notamment dans
[`dplyr::select()`](https://dplyr.tidyverse.org/reference/select.html).

Documentation dans le help
[`?tidyselect::starts_with`](https://tidyselect.r-lib.org/reference/starts_with.html):

-   `starts_with(x)` : colonnes qui commencent par `x`

-   `ends_with(x)` : colonnes qui terminent par `x`

-   `contains(x)` : colonnes qui contiennent `x`

-   `matches()` : colonnes qui correspondent √† une expression r√©guli√®re

::: {.callout-tip title="Astuces" fragment-index=4}
- Utilisez `ignore.case = TRUE` pour que la s√©lection ignore les
majuscules.  
- Utilisez <https://regex101.com>{target="_blank"} pour √©crire vos regex.
:::

## Tidyselect : exemple

```{r}
crosstable(mtcars2, 
           cols=c(starts_with("cy"), ends_with("at"), 
                  contains("is"), matches("g.*r"))) %>% 
  as_flextable(keep_id=TRUE, compact=FALSE)
```

## Labels

-   `set_label(x, lab)`, `get_label(x)`, `copy_label_from(x, y)`

-   `apply_labels()`, utile apr√®s un mutate pour labelliser les nouvelles colonnes

```{r attr.source="fragment-index=2"}
iris %>% 
  apply_labels(Sepal.Length="Length of Sepal", Petal.Width="Width of Petal") %>% 
  get_label()
```

-   `rename_with_labels()`, utile pour les plots

```{r attr.source="fragment-index=3"}
mtcars2 %>% 
  select(1:5) %>% 
  rename_with_labels() %>% names()
```

::: {.callout-tip title="Astuce" fragment-index=5}
- Liste des fonctions dans la documentation : [index.html#labelling](https://danchaltiel.github.io/crosstable/reference/index.html#labelling) 
- Aussi compatible avec les packages
[labelled](https://larmarange.github.io/labelled/) et
[hmisc](https://cran.r-project.org/web/packages/Hmisc/index.html).
:::


## Arguments : `unique_numeric`

- Pas beaucoup de sens de calculer la moyenne si tr√®s peu de niveaux. 

- L'argument `unique_numeric=3` permet de d√©cider √† partir de combien √ßa a du sens.

- S'il vaut `0` c'est toujours num√©rique, s'il vaut `Inf` c'est toujours factor.

:::::  {.columns}

::: {.column .nosep width="50%"}
```{r}
tibble(x=rep(1:3, 100)) %>% crosstable()
#
tibble(x=rep(1:3, 100)) %>% 
  crosstable(unique_numeric=0)
```
:::

::: {.column width="50%"}
```{r}
tibble(x=rep(1:4, 100)) %>% crosstable()
tibble(x=rep(1:4, 100)) %>% 
  crosstable(unique_numeric=Inf)
```
:::

::::: 

## Arguments : `percent_pattern`

- Vignette sp√©cifique dans la documentation :
[percent_pattern.html](https://danchaltiel.github.io/crosstable/articles/percent_pattern.html)

:::::  {.columns}

::: {.column .nosep width="50%"}
```{r}
# Valeur par d√©faut : `"{n} ({p_row})"`
#  si pas de groupe, `p_col` sinon.
crosstable(mtcars2, cols=c(am, vs)) %>% 
  as_flextable()
```
:::

::: {.column  width="50%"}
```{r}
crosstable(mtcars2, cols=c(am, vs), 
           percent_pattern="N={n} (pct={p_row})", 
           percent_digits=0) %>% 
  as_flextable()
```
:::

::::: 

::: {.callout-warning title="Attention"}
Si `total=TRUE`, il faut un pattern pour les totaux. Voir la syntaxe
dans la vignette.
:::

## Arguments : `funs` & `funs_arg`

- Permettent de contr√¥ler les calculs effectu√©s sur les variables
num√©riques

:::::  {.columns}

::: {.column .fragment .smallP width="50%"}
`funs_arg` permet d'ajouter des arguments √† `funs`.

```{r}
#

crosstable(mtcars2, cols=c(mpg, wt), 
           funs=c(mean, quantile),
           funs_arg=list(probs=c(.25,.75))) %>% 
  as_flextable(keep_id=TRUE)
```
:::

::: {.column .fragment .smallP width="50%"}
Mais il vaut mieux faire une fonction custom.
```{r}
my_summary_function = function(x){
  c("Med"=median(x), "Mean"=mean(x), "Std dv"=sd(x))
}
crosstable_options(funs=c(" "=my_summary_function))
crosstable(mtcars2, cols=c(mpg, wt)) %>% 
  as_flextable(keep_id=TRUE)
```
:::

::::: 

## Arguments : `effect` & `test`

:::::  {.columns}
::: {.column .fragment width="50%"}
Les effect-sizes, c'est cool üòä
```{r}
crosstable(mtcars2, c(vs, qsec), by=am, 
           funs=mean, effect=TRUE) %>% 
  as_flextable()
```
:::

:::: {.column .fragment width="50%"}
Les tests automatiques, c'est pas cool üò´
```{r}
crosstable(mtcars2, c(vs, qsec), by=am, 
           funs=mean, test=TRUE) %>% 
  as_flextable()
```
::: {.callout-warning title="Attention"}
Les tests dans les tables de description sont non-recommand√©s ([CONSORT
2010](https://www.bmj.com/content/340/bmj.c869#:~:text=Unfortunately%20significance%20tests%20of%20baseline%20differences%20are%20still%20common))
:::

::::

:::::

## Arguments de `as_flextable()`

Documentation en ligne [`ici`](https://danchaltiel.github.io/crosstable/reference/as_flextable.html).

Il y a un grand nombre de param√®tres, les principaux sont les suivants:

-   `keep_id` : garde les noms de variables avec les labels, utile pour d√©buguer
-   `compact` : format de la table (je pr√©f√®re `TRUE`)
-   `padding_v` : mettre `0` pour un tableau "comprim√©"
-   `header_show_n` : Afficher `N=xxx` dans l'en-t√™te du tableau

. . .

On peut utiliser les options pour changer les valeurs par d√©faut :

```{r}
#| eval: false
crosstable_options(compact=TRUE, padding_v=0, header_show_n=TRUE)
```


## Options

- Tous les arguments de
[`crosstable()`](https://danchaltiel.github.io/crosstable/reference/crosstable.html)
et de
[`as_flextable()`](https://danchaltiel.github.io/crosstable/reference/as_flextable.html)
peuvent √™tre d√©finis √† un niveau global.

- Il y a aussi quelques options plus mineures qui peuvent √™tre utiles.

- Utiliser la fonction
[`crosstable_options()`](https://danchaltiel.github.io/crosstable/reference/crosstable_options.html)
pour avoir la saisie semi-automatique et le help.

- Exemple :

```{r}
#| eval: false
crosstable_options(
  unique_numeric=6,
  header_show_n = TRUE, #in as_flextable()
  compact = TRUE,
  padding_v=0,
  units="cm",
)
```


## Post-processing

`crosstable()` retourne une dataframe, qu'on peut modifier avant de la transformer en `flextable`.

::: {.panel-tabset .no_fragment}

### Data

```{r}
#| code-line-numbers: "1-2|3|4-17"
set.seed(42)
f = function(N) sample(c("Yes", "No"), size=N, replace=TRUE)
df = tibble(id=1:50, q1=f(50), q2=f(50), q3=f(50))
head(df, n=10)
```

### crosstable

```{r}
#| code-line-numbers: "1|2-3|4-13"
ct = crosstable(df, cols=starts_with("q"), percent_digits=0)
class(ct) 
ct
```

### crosstable flex

```{r}
ct %>%  
  as_flextable(compact=FALSE)
```

### crosstable flex mut√©e

```{r}
ct %>% 
  mutate(variable=ifelse(variable=="Yes", "Oui", "Non")) %>% 
  filter(variable=="Oui") %>% 
  as_flextable(compact=FALSE)
```

:::


## Description: Conclusion

- Le package crosstable permet de faire des tableaux tr√®s vari√©s

- Ajoutez une issue sur GitHub si vous avez un bug

- Ajoutez une issue sur GitHub si vous avez une feature request

- Dans un module futur on verra `officer`, pour int√©grer les crosstables dans des rapports automatis√©s <br> ![](media/chris-pratt.gif){fig-align="center" style="width:35%; margin-left:30%;"}

